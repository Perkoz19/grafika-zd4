<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<script type="text/javascript">
/*//
*******************************************
*  _                    _             _   *
* | |    __ _ _ __ ___ | |__       _-(")- *
* | |   / _` | '_ ` _ \| '_ \    `%%%%%   *
* | |__| (_| | | | |_| | |_) | _  // \\   *
* |_____\__,_|_| |_| |_|_.__/_| |__  ___  *
*                  | |   / _` | '_ \/ __| *
*                  | |__| (_| | |_) \__ \ *
*  2019-05-13      |_____\__,_|_.__/|___/ *
*******************************************
//*/
var gl;
var shaderProgram;
var uPMatrix;
var vertexPositionBuffer;
var vertexColorBuffer;
var number = 100;

//Implementacja mnożenia macierzy
function MatrixMul(a, b)
{
  c = [
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  ];
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      c[i * 4 + j] = 0.0;
      for (let k = 0; k < 4; k++) {
        c[i * 4 + j] += a[i * 4 + k] * b[k * 4 + j];
      }
    }
  }

  return c;
}

function CreatePyramid(a,H,tx,ty,tz) {
  let h = a*Math.sqrt(3.0)/2.0;
  let pyramid = [
  -a/2+tx, +0.0+ty, 1.0/3.0*h+tz,  +a/2+tx, +0.0+ty, 1.0/3.0*h+tz, +0.0+tx, +0.0+ty,-2.0/3.0*h+tz,
  -a/2+tx, +0.0+ty, 1.0/3.0*h+tz,  +a/2+tx, +0.0+ty, 1.0/3.0*h+tz, +0.0+tx, -H+ty,+0.0+tz,
  +a/2+tx, +0.0+ty, 1.0/3.0*h+tz,  +0.0+tx, +0.0+ty,-2.0/3.0*h+tz, +0.0+tx, -H+ty,+0.0+tz,
  +0.0+tx, +0.0+ty,-2.0/3.0*h+tz,  -a/2+tx, +0.0+ty, 1.0/3.0*h+tz, +0.0+tx, -H+ty,+0.0+tz,
  ]
  return pyramid;
}

function NormalizeVector(a) {
  let l = a[0]*a[0]+a[1]*a[1]+a[2]*a[2];
  l = Math.sqrt(l);
  return [a[0]/l,a[1]/l,a[2]/l];
}

//n = 334
//n*3 = 1002
function createPointCloud(n){
  //let s = 5;
  let x, y, z;
  let pos = [], col = [], cor = [], nor = [];
  for(let i = 0; i<n*3; i++){
    //pos.push(Math.random()*3.5-s);
	col.push(Math.random());
	cor.push(Math.random());
	nor.push(Math.random());
	
	//pos.push(Math.random()*3.5-s);
	col.push(Math.random());
	cor.push(Math.random());
	nor.push(Math.random());
	
	//pos.push(Math.random()*3.5-s);
	col.push(Math.random());
	nor.push(Math.random());
	}
	
	for(let i=0; i<n; i++){
	  x = Math.random()*0.5;
	  y = Math.random()*0.5;
	  z = Math.random()*0.5;
	  pos.push(x);
	  pos.push(y);
	  pos.push(z);
	  pos.push(x + Math.random()*0.5);
	  pos.push(y + Math.random()*0.5);
	  pos.push(z + Math.random()*0.5);
	  pos.push(x - Math.random()*0.5);
	  pos.push(y - Math.random()*0.5);
	  pos.push(z - Math.random()*0.5);
	}
  return [pos, col, cor, nor];
}

function createParticlesLocation(n){
  let vel = [];
  let x = 3, y = 2;
  for(let i = 0; i<n; i++){
    vel.push(Math.random()*x-y);
	vel.push(Math.random()*x-y);
	vel.push(Math.random()*x-y);
  }
  return vel;
}

function updateParticlesLocation(pos, vel, n){
  let nextPos = [];
  let index = 0, x = 0, y = 0, z = 0;
  for(let i = 0; i<n; i++){
    x = vel[3*i];
	y = vel[3*i + 1];
	z = vel[3*i + 2];
	nextPos.push(pos[index]+x*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+y*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+z*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+x*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+y*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+z*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+x*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+y*(Math.random()%2)*0.01+0.01);
	index++;
	nextPos.push(pos[index]+z*(Math.random()%2)*0.01+0.01);
	index++;
	/*nextPos.push(pos[index]+x*0.01);
	index++;
	nextPos.push(pos[index]+y*0.01);
	index++;
	nextPos.push(pos[index]+z*0.01);
	index++;
	nextPos.push(pos[index]+x*0.01);
	index++;
	nextPos.push(pos[index]+y*0.01);
	index++;
	nextPos.push(pos[index]+z*0.01);
	index++;
	nextPos.push(pos[index]+x*0.01);
	index++;
	nextPos.push(pos[index]+y*0.01);
	index++;
	nextPos.push(pos[index]+z*0.01);
	index++;*/
  }
  return nextPos;
}

//Implementacja transpozycji macierzy
function MatrixTranspose(a)
{
  c = [
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  ];
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      c[i * 4 + j] = a[j * 4 + i];
    }
  }

  return c;
}

function startGL()
{
  //Init OpenGL context
  let canvas = document.getElementById('canvas3D');
  gl = canvas.getContext('experimental-webgl');
  gl.viewportWidth = canvas.width;
  gl.viewportHeight = canvas.height;

  //Init Shaders
  const vertextShaderSource = `
    precision highp float;
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexColor;
    attribute vec2 aVertexCoords;
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform float uBrightness;

    varying vec3 vColor;
    varying vec2 vTexUV;
    void main(void) {
      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
      //gl_Position = uMVMatrix * vec4(aVertexPosition, 1.0);
      //gl_Position.x = uMVMatrix[1][0]*0.5;
      //gl_Position.y = uMVMatrix[1][1]*0.5;
      //gl_Position.z = uMVMatrix[1][2]*0.5;
      //gl_Position.w = 1.0;
      gl_PointSize = 3.0;
      vColor = aVertexColor * uBrightness;
      vTexUV = aVertexCoords;
    }
  `;
  const fragmentShaderSource = `
    precision highp float;
    varying vec3 vColor;
    varying vec2 vTexUV;
    uniform sampler2D uSampler;
    void main(void) {
       //gl_FragColor = vec4(vColor,1.0);
       gl_FragColor = texture2D(uSampler,vTexUV);
    }
  `;
  let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  let vertexShader   = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(fragmentShader, fragmentShaderSource);
  gl.shaderSource(vertexShader, vertextShaderSource);
  gl.compileShader(fragmentShader);
  gl.compileShader(vertexShader);
  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
    alert(gl.getShaderInfoLog(fragmentShader));
    return null;
  }

  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
    alert(gl.getShaderInfoLog(vertexShader));
    return null;
  }

  shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, vertexShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) alert('Could not initialise shaders');

  //Init Buffers
  let vertexPosition = [
				//GŁOWA
                //przód
                    -2,-8,2.5, -2,-10,2.5, -4,-10,2.5,
                    -2,-8,2.5, -4,-10,2.5, -4,-8,2.5,
                //tył
                    -2,-8,0.5, -2,-10,0.5, -4,-10,0.5,
                    -2,-8,0.5, -4,-10,0.5, -4,-8,0.5,
                //lewo
                    -2,-8,0.5, -2,-10,0.5, -2,-10,2.5,
                    -2,-8,0.5, -2,-10,2.5, -2,-8,2.5,
                //prawo
                    -4,-8,0.5, -4,-10,0.5, -4,-10,2.5,
                    -4,-8,0.5, -4,-10,2.5, -4,-8,2.5,
                //góra
                    -2,-10,2.5, -2,-10,0.5, -4,-10,0.5,
                    -2,-10,2.5, -4,-10,0.5, -4,-10,2.5,
					
                //BRZUCH
                //przód
                    -1,-4,3, -1,-8,3, -5,-8,3,
                    -1,-4,3, -5,-8,3, -5,-4,3,
                //plecy
                    -1,-4,0, -1,-8,0, -5,-8,0,
                    -1,-4,0, -5,-8,0, -5,-4,0,
                //lewo
                    -1,-4,0, -1,-8,0, -1,-8,3,
                    -1,-4,0, -1,-8,3, -1,-4,3,
                //prawo
                    -5,-4,0, -5,-8,0, -5,-8,3,
                    -5,-4,0, -5,-8,3, -5,-4,3,
                //góra
                    -1,-8,3, -1,-8,0, -5,-8,0,
                    -1,-8,3, -5,-8,0, -5,-8,3,
                //dół
                    -1,-4,3, -1,-4,0, -5,-4,0,
                    -1,-4,3, -5,-4,0, -5,-4,3,
					
                //REKA LEWA
                //przód
                    0,-4,2, 0,-8,2, -1,-8,2,
                    0,-4,2, -1,-8,2, -1,-4,2,
                //tył
                    0,-4,1, 0,-8,1, -1,-8,1,
                    0,-4,1, -1,-8,1, -1,-4,1,
                //bok
                    0,-4,1, 0,-8,1, 0,-8,2,
                    0,-4,1, 0,-8,2, 0,-4,2,
                //góra
                    0,-8,2, 0,-8,1, -1,-8,1,
                    0,-8,2, -1,-8,1, -1,-8,2,
                //dół
                    0,-4,2, 0,-4,1, -1,-4,1,
                    0,-4,2, -1,-4,1, -1,-4,2,
					
                //REKA PRAWA
                //przód
                    -5,-4,2, -5,-8,2, -6,-8,2,
                    -5,-4,2, -6,-8,2, -6,-4,2,
                //tył
                    -5,-4,1, -5,-8,1, -6,-8,1,
                    -5,-4,1, -6,-8,1, -6,-4,1,
                //bok
                    -6,-4,1, -6,-8,1, -6,-8,2,
                    -6,-4,1, -6,-8,2, -6,-4,2,
                //góra
                    -5,-8,2, -5,-8,1, -6,-8,1,
                    -5,-8,2, -6,-8,1, -6,-8,2,
                //dół
                    -5,-4,2, -5,-4,1, -6,-4,1,
                    -5,-4,2, -6,-4,1, -6,-4,2,
					
                //NOGA LEWA
                //przód
                    -1,0,2.25, -1,-4,2.25, -2.5,-4,2.25,
                    -1,0,2.25, -2.5,-4,2.25, -2.5,0,2.25,
                //tył
                    -1,0,0.75, -1,-4,0.75, -2.5,-4,0.75,
                    -1,0,0.75, -2.5,-4,0.75, -2.5,0,0.75,
                //lewo
                    -1,0,0.75, -1,-4,0.75, -1,-4,2.25,
                    -1,0,0.75, -1,-4,2.25, -1,0,2.25,
                //prawo
                    -2.5,0,0.75, -2.5,-4,0.75, -2.5,-4,2.25,
                    -2.5,0,0.75, -2.5,-4,2.25, -2.5,0,2.25,
                //dół
                    -1,0,2.25, -1,0,0.75, -2.5,0,0.75,
                    -1,0,2.25, -2.5,0,0.75, -2.5,0,2.25,
					
                //NOGA PRAWA
                //przód
                    -3.5,0,2.25, -3.5,-4,2.25, -5,-4,2.25,
                    -3.5,0,2.25, -5,-4,2.25, -5,0,2.25,
                //tył
                    -3.5,0,0.75, -3.5,-4,0.75, -5,-4,0.75,
                    -3.5,0,0.75, -5,-4,0.75, -5,0,0.75,
                //lewo
                    -3.5,0,0.75, -3.5,-4,0.75, -3.5,-4,2.25,
                    -3.5,0,0.75, -3.5,-4,2.25, -3.5,0,2.25,
                //prawo
                    -5,0,0.75, -5,-4,0.75, -5,-4,2.25,
                    -5,0,0.75, -5,-4,2.25, -5,0,2.25,
                //dół
                    -3.5,0,2.25, -3.5,0,0.75, -5,0,0.75,
                    -3.5,0,2.25, -5,0,0.75, -5,0,2.25
					];

  vertexPositionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPosition), gl.STATIC_DRAW);
  vertexPositionBuffer.itemSize = 3;
  vertexPositionBuffer.numItems = 62;

  let vertexColor = [
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1,
					1,1,1, 1,1,1, 1,1,1
  ];

  vertexColorBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexColor), gl.STATIC_DRAW);
  vertexColorBuffer.itemSize = 3;
  vertexColorBuffer.numItems = 62;

  let vertexCoords = [
  
			//tył, lewo, góra:
			//dół-lewo, góra-lewo, góra-prawo,
			//dół-lewo, góra-prawo, dół-prawo

			//przód, prawo, dół:
			//dół-prawo, góra-prawo, góra-lewo,
			//dół-prawo, góra-lewo, dół-lewo
  
			//GŁOWA
			//tył
				0.4,0.125, 0.4,0, 0.6,0,
				0.4,0.125, 0.6,0, 0.6,0.125,
			//przód
				0.2,0.125, 0.2,0, 0,0,
				0.2,0.125, 0,0, 0,0.125,
			//lewo
				0.2,0.125, 0.2,0, 0.4,0,
				0.2,0.125, 0.4,0, 0.4,0.125,
			//prawo
				0.2,0.125, 0.2,0, 0.4,0,
				0.2,0.125, 0.4,0, 0.4,0.125,
			//góra
				0.6,0.125, 0.6,0, 0.8,0,
				0.6,0.125, 0.8,0, 0.8,0.125,
				
			//TUŁÓW
			//tył
				0.4,0.5, 0.4,0.125, 0.6,0.125,
				0.4,0.5, 0.6,0.125, 0.6,0.5,
			//przód
				0.2,0.5, 0.2,0.125, 0,0.125,
				0.2,0.5, 0,0.125, 0,0.5,
			//lewo
				0.2,0.5, 0.2,0.125, 0.4,0.125,
				0.2,0.5, 0.4,0.125, 0.4,0.5,
			//prawo
				0.2,0.5, 0.2,0.125, 0.4,0.125,
				0.2,0.5, 0.4,0.125, 0.4,0.5,
			//góra
				0.1,0.14, 0.1,0.14, 0.1,0.14,
				0.1,0.14, 0.1,0.14, 0.1,0.14,
			//dół
				0.12,0.77, 0.12,0.77, 0.12,0.77,
				0.12,0.77, 0.12,0.77, 0.12,0.77,
				
			//LEWA REKA
			//tył
				0.4,0.625, 0.4,0.5, 0.6,0.5,
				0.4,0.625, 0.6,0.5, 0.6,0.625,
			//przód
				0.2,0.625, 0.2,0.5, 0,0.5,
				0.2,0.625, 0,0.5, 0,0.625,
			//bok
				0.2,0.625, 0.2,0.5, 0.4,0.5,
				0.2,0.625, 0.4,0.5, 0.4,0.625,
			//góra
				0.8,0.625, 0.8,0.5, 1,0.5,
				0.8,0.625, 1,0.5, 1,0.625,
			//dół
				0.8,0.625, 0.8,0.5, 0.6,0.5,
				0.8,0.625, 0.6,0.5, 0.6,0.625,
				
			//PRAWA RĘKA
			//tył
				0.4,0.75, 0.4,0.625, 0.6,0.625,
				0.4,0.75, 0.6,0.625, 0.6,0.75,
			//przód
				0.2,0.75, 0.2,0.625, 0,0.625,
				0.2,0.75, 0,0.625, 0,0.75,
			//bok
				0.4,0.75, 0.4,0.625, 0.2,0.625,
				0.4,0.75, 0.2,0.625, 0.2,0.75,
			//góra
				0.8,0.75, 0.8,0.625, 1,0.625,
				0.8,0.75, 1,0.625, 1,0.75,
			//dół
				0.8,0.75, 0.8,0.625, 0.6,0.625,
				0.8,0.75, 0.6,0.625, 0.6,0.75,
				
			//LEWA NOGA
			//tył
				0.4,0.875, 0.4,0.75, 0.6,0.75,
				0.4,0.875, 0.6,0.75, 0.6,0.875,
			//przód
				0.2,0.875, 0.2,0.75, 0,0.75,
				0.2,0.875, 0,0.75, 0,0.875,
			//lewo
				0.2,0.875, 0.2,0.75, 0.4,0.75,
				0.2,0.875, 0.4,0.75, 0.4,0.875,
			//prawo
				0.4,1, 0.4,0.875, 0.2,0.875,
				0.4,1, 0.2,0.875, 0.2,1,
			//dół
				0.8,0.875, 0.8,0.75, 0.6,0.75,
				0.8,0.875, 0.6,0.75, 0.6,0.875,
				
			//PRAWA NOGA
			//tył
				0.4,1, 0.4,0.875, 0.6,0.875,
				0.4,1, 0.6,0.875, 0.6,1,
			//przód
				0.2,1, 0.2,0.875, 0,0.875,
				0.2,1, 0,0.875, 0,1,
			//lewo
				0.4,1, 0.4,0.875, 0.2,0.875,
				0.4,1, 0.2,0.875, 0.2,1,
			//prawo
				0.2,0.875, 0.2,0.75, 0.4,0.75,
				0.2,0.875, 0.4,0.75, 0.4,0.875,
			//dół
				0.8,1, 0.8,0.875, 0.6,0.875,
				0.8,1, 0.6,0.875, 0.6,1,
  ];

  vertexCoordsBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexCoords), gl.STATIC_DRAW);
  vertexCoordsBuffer.itemSize = 2;
  vertexCoordsBuffer.numItems = 62;
 
  var vertPointCloudPosition = [];
  var vertPointCloudColor = [];
  var vertPointCloudCoords = [];
  var vertPointCloudNormals = [];
  
  let [pos2, col2, cor2, nor2] = createPointCloud(number);
  vertPointCloudPosition.push(...pos2);
  vertPointCloudColor.push(...col2);
  vertPointCloudCoords.push(...cor2);
  vertPointCloudNormals.push(...nor2);
  
  vertexPointCloudPositionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudPositionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertPointCloudPosition), gl.STATIC_DRAW);
  vertexPointCloudPositionBuffer.itemSize = 3;
  vertexPointCloudPositionBuffer.numItems = number;
  
  vertexPointCloudColorBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudColorBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertPointCloudColor), gl.STATIC_DRAW);
  vertexPointCloudColorBuffer.itemSize = 3;
  vertexPointCloudColorBuffer.numItems = number;
  
  vertexPointCloudCoordsBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudCoordsBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertPointCloudCoords), gl.STATIC_DRAW);
  vertexPointCloudCoordsBuffer.itemSize = 2;
  vertexPointCloudCoordsBuffer.numItems = number;
  
  /*vertexPointCloudNormalsBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudNormalsBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertPointCloudNormals), gl.STATIC_DRAW);
  vertexPointCloudNormalsBuffer.itemSize = 3;
  vertexPointCloudNormalsBuffer.numItems = number;*/

  //let textureImg = document.getElementById('textureImg');
  textureBuffer = gl.createTexture();
  var textureImg = new Image();
  textureImg.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
    //gl.texImage2D(gl.TEXTURE_2D, 0, textureImg);
    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 480, 480, 0, gl.RGBA, gl.UNSIGNED_BYTE, textureImg.image);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImg);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureImg.src="grafika-tekstura.png";
  
  textureBufferCloud = gl.createTexture();
  var textureImgCloud = new Image();
  textureImgCloud.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferCloud);
    //gl.texImage2D(gl.TEXTURE_2D, 0, textureImg);
    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 480, 480, 0, gl.RGBA, gl.UNSIGNED_BYTE, textureImg.image);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImgCloud);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureImgCloud.src="cloud.jpg";
  
  //Init Matrices
  let aspect = gl.viewportWidth / gl.viewportHeight;
  let fov = 45.0 * Math.PI / 180.0;
  let zFar = 100.0;
  let zNear = 0.1;
  var velocity = createParticlesLocation(number);
  uPMatrix = [
   1.0 / (aspect * Math.tan(fov / 2)), 0                        , 0                                    , 0,
   0                                 , 1.0 / (Math.tan(fov / 2)), 0                                    , 0,
   0                                 , 0                        , -(zFar + zNear) / (zFar - zNear)     , -1,
   0                                 , 0                        , -(2 * zFar * zNear) / (zFar - zNear) , 0.0,
  ];
  Tick(vertPointCloudPosition, velocity);
}

var angle = 20.0;
var angleZ = 0.0;
var angleY = 0.0;
var angleX = 180.0;
var translateZ = -15.0;
var translateY = -5.0;
var translateX = 0.0;

var translateZ2 = -5.0;
var translateY2 = 0.0;
var translateX2 = -10.0;

function Tick(partpos, vel)
{
  //angleX = angleX + 1.0;
  //angleY = angleY + 1.0;
  let uMVMatrix = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 0, 1,
 ]);

  let uMVTranslateConstX = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  -2, 0, 0, 1,
  ]);

  let uMVTranslateConstY = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, -5, 0, 1,
  ]);

  let uMVTranslateConstZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 2, 1,
  ]);

  let uMVTranslateConstmX = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  -2, 0, 0, 1,
  ]);

  let uMVTranslateConstmY = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, -2, 0, 1,
  ]);

  let uMVTranslateConstmZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, -2, 1,
  ]);

  let uMVTranslateZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  translateX, translateY, translateZ, 1,
  ]);

  let uMVTranslateZ2 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  translateX2, translateY2, translateZ2, 1,
  ]);

  let uMVRotZ = MatrixTranspose([
  +Math.cos(angleZ*Math.PI/180.0),+Math.sin(angleZ*Math.PI/180.0),0,0,
  -Math.sin(angleZ*Math.PI/180.0),+Math.cos(angleZ*Math.PI/180.0),0,0,
  0,0,1,0,
  0,0,0,1
  ]);
  let uMVRotY = MatrixTranspose([
  +Math.cos(angleY*Math.PI/180.0),0,-Math.sin(angleY*Math.PI/180.0),0,
  0,1,0,0,
  +Math.sin(angleY*Math.PI/180.0),0,+Math.cos(angleY*Math.PI/180.0),0,
  0,0,0,1
  ]);
  let uMVRotX = MatrixTranspose([
  1,0,0,0,
  0,+Math.cos(angleX*Math.PI/180.0),+Math.sin(angleX*Math.PI/180.0),0,
  0,-Math.sin(angleX*Math.PI/180.0),+Math.cos(angleX*Math.PI/180.0),0,
  0,0,0,1
  ]);

  //Create Model View Matrix by Multiplication elementary matrices
  //uMVMatrix = uMVTranslateZ*uMVRotX*uMVRotY*uMVRotZ
  //uMVMatrix = MatrixMul(uMVMatrix,uMVRotX);
  //uMVMatrix = MatrixMul(uMVMatrix,uMVRotY);
  //uMVMatrix = MatrixMul(uMVMatrix,uMVRotZ);
  //uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateZ);

  uMVMatrix = MatrixMul(uMVRotX,uMVMatrix);
  uMVMatrix = MatrixMul(uMVRotY,uMVMatrix);
  uMVMatrix = MatrixMul(uMVRotZ,uMVMatrix);
  uMVMatrix = MatrixMul(uMVTranslateZ,uMVMatrix);

  //Render Scene
  gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
  gl.clearColor(0.9,0.9,0.7,1.0);
  gl.clearDepth(1.0);                 // Clear everything
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.useProgram(shaderProgram)

  gl.enable(gl.DEPTH_TEST);           // Enable depth testing
  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things

  //gl.enable(gl.GL_CULL_FACE);
  //gl.cullFace(gl.GL_FRONT_AND_BACK);
  //gl.frontFace(gl.CW);


  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uPMatrix"), false, new Float32Array(uPMatrix)); //Pass matrices
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix)));

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexColor"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexColor"), vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexCoords"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexCoords"), vertexCoordsBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
  gl.uniform1f(gl.getUniformLocation(shaderProgram, "uBrightness"), 0.6);

  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
  gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);

  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*3); //Invoke drawing
  
  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));
  partpos = updateParticlesLocation(partpos, vel, number);
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudPositionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(partpos), gl.STATIC_DRAW);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPointCloudPositionBuffer.itemSize, gl.FLOAT, false, 0, 0,);
  
  //gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));  //Pass the geometry
  //gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudPositionBuffer);
  //gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexColor"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudColorBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexColor"), vertexPointCloudColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexCoords"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPointCloudCoordsBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexCoords"), vertexPointCloudCoordsBuffer.itemSize, gl.FLOAT, false, 0, 0);

  //gl.uniform1f(gl.getUniformLocation(shaderProgram, "uBrightness"), 0.6);

  //gl.activeTexture(gl.TEXTURE0);
  //gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
  //gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, textureBufferCloud);
  gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);
  
  uMVMatrix = MatrixMul(uMVMatrix, uMVTranslateConstX);
  uMVMatrix = MatrixMul(uMVMatrix, uMVTranslateConstY);
  uMVMatrix = MatrixMul(uMVMatrix, uMVTranslateConstZ);
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix)));
  gl.drawArrays(gl.TRIANGLES, 0, vertexPointCloudColorBuffer.numItems*3); //Invoke drawing
  //gl.drawArrays(gl.POINTS, 0, vertexPositionBuffer.numItems); //Invoke drawing

  setTimeout(function(){Tick(partpos, vel);},1);
}

function keydown(e)
{
 if(e.keyCode==87) angleX=angleX+5.0;
 if(e.keyCode==83) angleX=angleX-5.0;
 if(e.keyCode==68) angleY=angleY+5.0;
 if(e.keyCode==65) angleY=angleY-5.0;
 if(e.keyCode==81) angleZ=angleZ+5.0;
 if(e.keyCode==69) angleZ=angleZ-5.0;

 if(e.keyCode==39) translateX=translateX+5.0;
 if(e.keyCode==37) translateX=translateX-5.0;
 if(e.keyCode==38) translateY=translateY+5.0;
 if(e.keyCode==40) translateY=translateY-5.0;
 if(e.keyCode==34) translateZ=translateZ+5.0;
 if(e.keyCode==33) translateZ=translateZ-5.0;

 if(e.keyCode==76) translateX2=translateX2+5.0;
 if(e.keyCode==74) translateX2=translateX2-5.0;
 if(e.keyCode==73) translateY2=translateY2+5.0;
 if(e.keyCode==75) translateY2=translateY2-5.0;
 if(e.keyCode==85) translateZ2=translateZ2+5.0;
 if(e.keyCode==79) translateZ2=translateZ2-5.0;
}
</script>
</head>
<body onload="startGL()" onkeydown="keydown(event)">
<canvas id="canvas3D" width="640" height="480" style="border: solid black 1px"></canvas>
<!--<img id="textureImg" src="grafika-tekstura.jpg">-->
</body>
</html>